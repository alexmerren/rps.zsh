// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/alexmerren/rps/internal/github/repository"
)

// RepositoryPrompter is an autogenerated mock type for the RepositoryPrompter type
type RepositoryPrompter struct {
	mock.Mock
}

// SelectRepositoryPrompt provides a mock function with given fields: repositories, isVimMode, numLinesInPrompt, stdout
func (_m *RepositoryPrompter) SelectRepositoryPrompt(repositories []*repository.Repository, isVimMode bool, numLinesInPrompt int, stdout io.WriteCloser) (int, error) {
	ret := _m.Called(repositories, isVimMode, numLinesInPrompt, stdout)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]*repository.Repository, bool, int, io.WriteCloser) (int, error)); ok {
		return rf(repositories, isVimMode, numLinesInPrompt, stdout)
	}
	if rf, ok := ret.Get(0).(func([]*repository.Repository, bool, int, io.WriteCloser) int); ok {
		r0 = rf(repositories, isVimMode, numLinesInPrompt, stdout)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]*repository.Repository, bool, int, io.WriteCloser) error); ok {
		r1 = rf(repositories, isVimMode, numLinesInPrompt, stdout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryPrompter creates a new instance of RepositoryPrompter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryPrompter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryPrompter {
	mock := &RepositoryPrompter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
